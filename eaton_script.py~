import matplotlib.pyplot as plt
import numpy as np
from data_diaphragm import *

def Alpha(diaphragm):
    """
    Returns the factor alpha in the deflection formula
    """
    return 14 * (4 * diaphragm.h**2) / ((1+diaphragm.mu) * (23 - 9 * diaphragm.mu))

def D(diaphragm):
    """
    Returns the value of flexural rigidity for given diaphragm
    """
    return diaphragm.E * diaphragm*h**3 / (12 * (1 - diaphragm.mu**2))

def Beta(P, diaphragm):
    """
    Returns beta factor in deflection formula
    """
    return -7 * P * diaphragm.a**4 * diaphragm**2 / (8 * D(diaphragm) * (1 + diaphragm.mu) * (23 - 9 * diaphragm.mu))

def Gamma(P, diaphragm):
    """
    Returns the gamma factor for the given diaphragm
    """
    return (Alpha(diaphragm)**3 / 27 + Beta(P, diaphragm)**4 / 4)**(1/2)

def f(P, diaphragm):
    """
    Returns the maximum deflection for a given diaphragm
    """
    beta1 = Beta(P, diaphragm)
    gamma1 = Gamma(P, diaphragm)
    return ( - beta1 / 2 + gamma1)**(1/3) + (- beta1/ 2 - gamma1)**(1/3) 

def detDeflect(P, flatPlate):
    """
    Returns a list of maximum values of deflection in mm for given applied pressure values
    
    P: list of pressure
    """
    return [flatPlateDeflect(0, p, flatPlate) for p in P]
    
def plotPvsy(P, diaphragm, legend):
    """
    Plots the graph of deflection variation with pressure variation for given flatPlate
    
    P: list of pressure values
    """
    y = detDeflect(P, flatPlate)
    graph(P, y, "Pressure[Pa]", "Deflection[m]", legend = legend)

if __name__ == "__main__":
    
